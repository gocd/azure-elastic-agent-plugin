/*
 * Copyright 2020 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"
apply plugin: 'java'

project.ext.versions = [
  goPluginApi : "19.2.0",
  lombok      : "1.18.2",
  gson        : '2.7',
  guava       : '19.0',
  lang3       : '3.4',
  joda        : '2.9.4',
  azure       : '1.17.0',
  freemarker  : '2.3.28',
  junitJupiter: '5.3.2',
  hamcrestLib : '1.3',
  mockito     : '3.0.0',
  jsonAssert  : '1.5.0'
]

gocdPlugin {
  id = 'com.thoughtworks.gocd.elastic-agent.azure'
  pluginVersion = '1.1.0'
  goCdVersion = '20.9.0'
  name = 'GoCD Elastic Agent Plugin for Azure'
  description = 'GoCD Elastic Agent Plugin for Azure allows efficient usage of Azure instances'
  vendorName = 'ThoughtWorks, Inc.'
  vendorUrl = 'https://github.com/gocd-private/azure-elastic-agent-plugin'

  githubRepo {
    owner = System.getenv('GITHUB_USER') ?: 'bob'
    repo = 'azure-elastic-agent-plugin'
    token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
  }

  pluginProject = project

  prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
  assetsToRelease = [project.tasks.findByName('jar')]
}

version = gocdPlugin.fullVersion(project)
sourceCompatibility = 11
targetCompatibility = 11

// In this section you declare where to find the dependencies of your project
repositories {
  jcenter()
  mavenLocal()
}

sourceSets {
  test {
    java {
      compileClasspath += configurations.compileOnly
      runtimeClasspath += configurations.compileOnly
    }
  }
}

dependencies {
  compileOnly group: 'org.projectlombok', name: 'lombok', version: project.versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: project.versions.lombok

  implementation group: 'cd.go.plugin', name: 'go-plugin-api', version: project.versions.goPluginApi
  implementation group: 'com.google.code.gson', name: 'gson', version: project.versions.gson
  implementation group: 'com.google.guava', name: 'guava', version: project.versions.guava
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: project.versions.lang3
  implementation group: 'joda-time', name: 'joda-time', version: project.versions.joda
  implementation group: 'com.microsoft.azure', name: 'azure', version: project.versions.azure
  implementation group: 'org.freemarker', name: 'freemarker', version: project.versions.freemarker

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.versions.junitJupiter
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.versions.junitJupiter
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.versions.junitJupiter
  testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: project.versions.hamcrestLib
  testImplementation group: 'org.mockito', name: 'mockito-core', version: project.versions.mockito
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: project.versions.mockito

  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: project.versions.jsonAssert
}

test {
  useJUnitPlatform()
}

jar {
  from(configurations.compileClasspath) {
    into "lib/"
  }
}
